import unittest
import numpy as np
import pkrcomponents.table as table
import pkrcomponents.tournament as tournament
import pkrcomponents.table_player as player
from pkrcomponents.constants import Street


class MyTableTestCase(unittest.TestCase):

    def setUp(self) -> None:
        self.level = tournament.Level(4, 400)
        self.level2 = tournament.Level(5, 600)
        self.tour = tournament.Tournament(level=self.level)
        self.p1 = player.TablePlayer(name="Toto", seat=1, stack=2000)
        self.p2 = player.TablePlayer(name="Tata", seat=2, stack=2500)
        self.p3 = player.TablePlayer(name="Titi", seat=6, stack=25000)
        self.p4 = player.TablePlayer(name="Tété", seat=4, stack=120327)
        self.p5 = player.TablePlayer(name="Tutu", seat=5, stack=267)
        self.p6 = player.TablePlayer(name="Tonton", seat=3, stack=11500)
        self.pl_list = [self.p1, self.p2, self.p3, self.p4]
        self.pl_list2 = [self.p1, self.p2, self.p3, self.p4, self.p5, self.p6]

    def test_new_table(self):
        tab = table.Table()
        self.assertIsInstance(tab, table.Table)
        self.assertIsInstance(tab.deck, table.Deck)
        self.assertIsInstance(tab.board, table.Board)
        self.assertIsInstance(tab.players, table.Players)
        self.assertIsInstance(tab.pot, table.Pot)
        self.assertIsInstance(tab.street, Street)
        self.assertEqual(tab.street, Street.PREFLOP)
        self.assertEqual(tab.pot.value, 0)
        self.assertEqual(tab.deck.len, 52)
        self.assertEqual(tab.board.len, 0)
        with self.assertRaises(ValueError):
            tab.max_players = 11
        tab.max_players = 9
        self.assertEqual(tab.max_players, 9)
        tab.level = self.level2
        self.assertEqual(tab.level.sb, 300)
        tab.add_tournament(self.tour)
        self.assertEqual(tab.level.sb, 200)
        self.assertIsInstance(tab.tournament, tournament.Tournament)
        self.assertIsInstance(tab._tournament, tournament.Tournament)
        self.assertEqual(self.level.bb, 400)

    def test_playing_order(self):
        tab = table.Table()
        for pl in self.pl_list:
            pl.sit(tab)
        self.p1.distribute("AcKc")
        self.assertEqual(tab.playing_order, [2, 4, 6, 1])
        self.assertIsInstance(tab.players_waiting, list)
        self.assertEqual(tab.players_waiting, [self.p2, self.p4, self.p3, self.p1])
        tab._street = Street.FLOP
        self.assertEqual(tab.playing_order, [6, 1, 2, 4])
        self.assertEqual(tab.players_waiting, [self.p3, self.p1, self.p2, self.p4])
        self.assertEqual(self.p1.stack, 2000)
        self.p2.do_bet(4000)
        self.assertEqual(self.p2.stack, 0)
        self.assertTrue(self.p2.is_all_in)
        self.assertFalse(self.p2.can_play)
        self.assertEqual(tab.players_waiting, [self.p3, self.p1, self.p4])
        self.assertEqual(self.p1.to_call, 2000)
        self.p1.do_call()
        self.assertEqual(tab.players_waiting, [self.p3, self.p4])
        tab.draw_flop("As", "Ad", "Ah")
        self.assertEqual(self.p1.hand_score, 11)
        self.assertEqual(self.p1.rank_class, 2)
        self.assertEqual(self.p1.class_str, "Four of a Kind")

    def test_draws(self):
        tab = table.Table()
        tab.draw_flop("As", "Ad", "Ah")
        self.assertEqual(tab.board.len, 3)
        self.assertTrue((tab.board.values[:3] == np.array(["As", "Ad", "Ah"])).all())
        self.assertRaises(ValueError, lambda: tab.draw_flop())
        self.assertRaises(ValueError, lambda: tab.draw_turn("As"))
        self.assertRaises(ValueError, lambda: tab.draw_river("Jd"))
        tab.draw_turn("Ac")
        self.assertEqual(tab.board.len, 4)
        self.assertEqual(tab.board["turn"], "Ac")
        self.assertTrue((tab.board.values[:4] == np.array(["As", "Ad", "Ah", "Ac"])).all())
        self.assertRaises(ValueError, lambda: tab.draw_flop())
        self.assertRaises(ValueError, lambda: tab.draw_turn("Jd"))
        tab.draw_river("Jd")
        self.assertEqual(tab.board.len, 5)
        self.assertEqual(tab.board["river"], "Jd")
        self.assertTrue((tab.board.values == np.array(["As", "Ad", "Ah", "Ac", "Jd"])).all())

    def test_pregame_betting_and_odds(self):
        tab = table.Table()
        tab.max_players = 6
        tab.add_tournament(self.tour)
        for pl in self.pl_list:
            pl.sit(tab)
        tab.bb = 2
        tab.players.distribute_positions()
        tab.post_pregame()
        self.assertEqual(tab.pot.value, 800)
        self.assertEqual(tab.pot.highest_bet, tab.level.bb)
        self.assertEqual(tab.players[1].to_call, 0)
        self.assertEqual(tab.players[1].pot_odds, float("inf"))
        self.assertEqual(tab.players[1].req_equity, 0)
        self.assertEqual(tab.players[1].current_bet, 400)
        self.assertEqual(tab.players[2].to_call, 400)
        self.assertEqual(tab.players[2].pot_odds, 2)
        self.assertEqual(tab.players[2].current_bet, 0)
        self.assertEqual(tab.players[2].req_equity, 1/3)
        self.assertEqual(tab.players[4].to_call, 400)
        self.assertEqual(tab.players[6].to_call, 200)
        self.assertEqual(tab.players[6].pot_odds, 4)
        self.assertEqual(tab.players[6].req_equity, 1/5)
        self.assertEqual(tab.players[6].current_bet, 200)

    def test_game(self):
        tab = table.Table()
        tab.max_players = 6
        tab.add_tournament(self.tour)
        self.assertEqual(tab.min_bet, 800)
        for pl in self.pl_list2:
            pl.sit(tab)
        tab.players[1].distribute("TdTh")
        tab.players[2].distribute("KdJd")
        tab.players[3].distribute("7h7c")
        tab.players[4].distribute("8d9d")
        tab.players[5].distribute("AsKs")
        tab.players[6].shows("9h8h")
        tab.players.bb = 2
        tab.players.distribute_positions()
        self.assertEqual(tab.pot.value, 0)
        tab.post_pregame()
        self.assertEqual(tab.min_bet, 2 * tab.level.bb)
        self.assertEqual(tab.current_player, self.p6)
        self.assertEqual(tab.pot.value, 900)
        self.assertEqual(tab.nb_waiting, 6)
        self.assertEqual(tab.seat_playing, 3)
        tab.advance_seat_playing()
        self.assertEqual(tab.nb_waiting, 6)
        self.assertEqual(tab.seat_playing, 3)
        self.assertEqual(tab.seats_playing, [3, 4, 5, 6, 1, 2])
        self.assertEqual(tab.players_in_game, tab.players_waiting)
        tab.current_player.do_fold()
        self.assertEqual(tab.nb_waiting, 5)
        self.assertEqual(tab.seat_playing, 3)
        self.assertEqual(tab.seats_playing, [4, 5, 6, 1, 2])
        tab.advance_seat_playing()
        self.assertEqual(tab.seat_playing, 4)
        self.assertEqual(tab.seats_playing, [4, 5, 6, 1, 2])
        tab.current_player.do_call()
        self.assertEqual(tab.nb_waiting, 4)
        self.assertEqual(tab.seats_playing, [5, 6, 1, 2])
        self.assertFalse(tab.current_player.is_all_in)
        self.assertFalse(tab.players[4].can_play)
        tab.advance_seat_playing()
        self.assertEqual(tab.seat_playing, 5)
        tab.current_player.do_call()
        self.assertEqual(tab.nb_waiting, 3)
        self.assertEqual(tab.seats_playing, [6, 1, 2])
        self.assertTrue(tab.current_player.is_all_in)
        tab.advance_seat_playing()
        self.assertEqual(tab.seat_playing, 6)
        tab.current_player.do_bet(3000)
        self.assertEqual(tab.min_bet, 800)
        self.assertTrue(tab.players[4].can_play)
        self.assertEqual(tab.nb_waiting, 3)
        self.assertEqual(tab.seats_playing, [4, 1, 2])
        self.assertFalse(tab.current_player.can_play)
        tab.advance_seat_playing()
        tab.min_bet = 5200
        self.assertEqual(tab.seat_playing, 1)
        self.assertEqual(tab.nb_waiting, 3)
        self.assertTrue(tab.players[1].can_play)
        self.assertFalse(tab.players[1].is_all_in)
        tab.current_player.do_call()
        self.assertTrue(tab.players[1].is_all_in)
        self.assertEqual(tab.nb_waiting, 2)
        self.assertEqual(tab.seats_playing, [4, 2])
        tab.advance_seat_playing()
        self.assertEqual(tab.seat_playing, 2)
        tab.current_player.fold()
        self.assertEqual(tab.nb_waiting, 1)
        self.assertEqual(tab.seats_playing, [4])
        self.assertEqual(tab.seat_playing, 4)
        self.assertEqual(tab.players_in_game, [tab.players[4], tab.players[6]])
        tab.current_player.do_call()
        self.assertEqual(tab.nb_waiting, 0)
        self.assertEqual(tab.seats_playing, [])
        self.assertEqual(tab.pot.value, 8867)
        self.assertEqual(tab.players_involved, [tab.players[4], tab.players[5], tab.players[6], tab.players[1]])
        self.assertEqual(tab.nb_involved, 4)
        tab.flop("Qs", "Js", "Tc")
        self.assertEqual(tab.pot.highest_bet, 0)
        for pl in tab.players_in_game:
            self.assertEqual(pl.current_bet, 0)
        self.assertEqual(tab.playing_order, [1, 2, 3, 4, 5, 6])
        self.assertEqual(tab.players_in_game, [tab.players[4], tab.players[6]])
        self.assertEqual(tab.seats_playing, [4, 6])
        self.assertEqual(tab.nb_waiting, 2)
        tab.current_player.check()
        self.assertEqual(tab.seats_playing, [6])
        self.assertEqual(tab.nb_waiting, 1)
        with self.assertRaises(ValueError):
            tab.current_player.bet(1050)
        tab.current_player.bet(11050)
        self.assertEqual(tab.seats_playing, [4])
        self.assertEqual(tab.nb_waiting, 1)
        self.assertEqual(tab.current_player.to_call, 11050)
        self.assertRaises(ValueError, lambda: tab.current_player.do_check())
        self.assertRaises(ValueError, lambda: tab.current_player.check())
        self.assertEqual(tab.pot.value, 19917)
        tab.current_player.call()
        self.assertEqual(tab.current_player.to_call, 0)
        self.assertEqual(tab.pot.value, 30967)
        tab.turn("Ts")
        self.assertEqual(tab.pot.value, sum([pl.invested for pl in tab.players]))
        self.assertEqual(tab.players[1].invested, 2000)
        self.assertEqual(tab.players[1].max_reward, 6767)
        self.assertEqual(tab.players[2].invested, 450)
        self.assertEqual(tab.players[2].max_reward, 0)
        self.assertEqual(tab.players[3].invested, 50)
        self.assertEqual(tab.players[3].max_reward, 0)
        self.assertEqual(tab.players[4].invested, 14100)
        self.assertEqual(tab.players[4].max_reward, 30967)
        self.assertEqual(tab.players[5].invested, 267)
        self.assertEqual(tab.players[5].max_reward, 1385)
        self.assertEqual(tab.players[6].invested, 14100)
        self.assertEqual(tab.players[6].max_reward, 30967)
        tab.current_player.bet(tab.pot.value)
        self.assertEqual(tab.pot.value, 61934)
        self.assertEqual(tab.current_player, tab.players[6])
        self.assertEqual(tab.players_waiting, [tab.players[6]])
        tab.current_player.bet(1e6)
        tab.current_player.bet(1e7)
        self.assertEqual(tab.nb_waiting, 0)
        self.assertEqual(tab.players_involved, [tab.players[1], tab.players[4], tab.players[5], tab.players[6]])
        self.assertEqual(tab.players[1].hand_score, 61)
        self.assertEqual(tab.players[4].hand_score, 1602)
        self.assertEqual(tab.players[5].hand_score, 1)
        self.assertEqual(tab.players[6].hand_score, 1602)
        tab.river("Ah")
        self.assertEqual(tab.players[1].hand_score, 59)
        self.assertEqual(tab.players[4].hand_score, 1602)
        self.assertEqual(tab.players[5].hand_score, 1)
        self.assertEqual(tab.players[6].hand_score, 1602)
        tab.distribute_rewards()
        self.assertEqual(tab.players[1].stack, 5382)
        self.assertEqual(tab.players[4].stack, 108293.5)
        self.assertEqual(tab.players[5].stack, 1385)
        self.assertEqual(tab.players[6].stack, 33033.5)

    def test_game2(self):
        tab = table.Table()
        tab.max_players = 6
        tab.add_tournament(self.tour)
        self.assertEqual(tab.min_bet, 800)
        for pl in self.pl_list2:
            pl.sit(tab)
        tab.players[1].distribute("TdTh")
        tab.players[2].distribute("KdJd")
        tab.players[3].distribute("7h7c")
        tab.players[4].distribute("8d9d")
        tab.players[5].distribute("AsKs")
        tab.players[6].shows("9h8h")
        tab.players.bb = 2
        tab.players.distribute_positions()
        self.assertEqual(tab.pot.value, 0)
        tab.post_pregame()
        self.assertEqual(tab.min_bet, 2 * tab.level.bb)
        self.assertEqual(tab.current_player, self.p6)
        self.assertEqual(tab.pot.value, 900)
        tab.players[5].bet(400)
        self.assertEqual(tab.pot.value, 900+217)


if __name__ == '__main__':
    unittest.main()
